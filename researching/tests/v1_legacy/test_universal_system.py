#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç Universal Quality Assessment System

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ CV –¥–∞–Ω–Ω—ã–µ –≤ Kafka –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
"""

import json
import asyncio
import time
from datetime import datetime
from confluent_kafka import Producer, Consumer
from typing import Dict, Any

# –¢–µ—Å—Ç–æ–≤—ã–µ CV –¥–∞–Ω–Ω—ã–µ (—Å–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
SAMPLE_SQUAT_FRAMES = [
    {
        "frame_track_uuid": "test_squat_001",
        "timestamp": datetime.now().isoformat(),
        "exercise": "squat",
        "session_uuid": "test_squat_session_001",
        "video_duration": 30.0,
        "current_time": 1.0,
        "landmarks": [{"x": 0.5, "y": 0.7, "z": -0.3} for _ in range(33)],
        "metrics": {
            "angles": [
                {"name": "knee_angle", "value": 170.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.4}, "ref_point": {"x": 0.6, "y": 1.1}},  # s1 - standing
                {"name": "hip_angle", "value": 175.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}},
                {"name": "back_angle", "value": 25.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}}
            ],
            "dominant_side": {"side": "left", "probability": 0.8}
        }
    },
    {
        "frame_track_uuid": "test_squat_002", 
        "timestamp": datetime.now().isoformat(),
        "exercise": "squat",
        "session_uuid": "test_squat_session_001",
        "video_duration": 30.0,
        "current_time": 2.0,
        "landmarks": [{"x": 0.5, "y": 0.7, "z": -0.3} for _ in range(33)],
        "metrics": {
            "angles": [
                {"name": "knee_angle", "value": 130.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.4}, "ref_point": {"x": 0.6, "y": 1.1}},  # s2 - descending
                {"name": "hip_angle", "value": 110.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}},
                {"name": "back_angle", "value": 30.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}}
            ],
            "dominant_side": {"side": "left", "probability": 0.8}
        }
    },
    {
        "frame_track_uuid": "test_squat_003",
        "timestamp": datetime.now().isoformat(), 
        "exercise": "squat",
        "session_uuid": "test_squat_session_001",
        "video_duration": 30.0,
        "current_time": 3.0,
        "landmarks": [{"x": 0.5, "y": 0.7, "z": -0.3} for _ in range(33)],
        "metrics": {
            "angles": [
                {"name": "knee_angle", "value": 75.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.4}, "ref_point": {"x": 0.6, "y": 1.1}},  # s3 - deep squat
                {"name": "hip_angle", "value": 125.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}},
                {"name": "back_angle", "value": 35.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}}
            ],
            "dominant_side": {"side": "left", "probability": 0.8}
        }
    },
    {
        "frame_track_uuid": "test_squat_004_DANGEROUS",
        "timestamp": datetime.now().isoformat(), 
        "exercise": "squat",
        "session_uuid": "test_squat_session_001",
        "video_duration": 30.0,
        "current_time": 4.0,
        "landmarks": [{"x": 0.5, "y": 0.7, "z": -0.3} for _ in range(33)],
        "metrics": {
            "angles": [
                {"name": "knee_angle", "value": 40.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.4}, "ref_point": {"x": 0.6, "y": 1.1}},  # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø SAFETY –û–®–ò–ë–ö–ê!
                {"name": "hip_angle", "value": 160.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}},  # –ü–ª–æ—Ö–∞—è –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å
                {"name": "back_angle", "value": 60.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}}  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ù–ê–ö–õ–û–ù –í–ü–ï–†–ï–î!
            ],
            "dominant_side": {"side": "left", "probability": 0.8}
        }
    }
]

SAMPLE_DUMBBELL_FRAMES = [
    {
        "frame_track_uuid": "test_frame_001",
        "timestamp": datetime.now().isoformat(),
        "exercise": "dumbbell-arm",
        "session_uuid": "test_session_001",
        "video_duration": 30.0,
        "current_time": 1.0,
        "landmarks": [{"x": 0.5, "y": 0.7, "z": -0.3} for _ in range(33)],
        "metrics": {
            "angles": [
                {"name": "elbow_angle", "value": 120.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.4}, "ref_point": {"x": 0.6, "y": 1.1}},
                {"name": "shoulder_angle", "value": 15.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}}
            ],
            "dominant_side": {"side": "left", "probability": 0.8}
        }
    },
    {
        "frame_track_uuid": "test_frame_002", 
        "timestamp": datetime.now().isoformat(),
        "exercise": "dumbbell-arm",
        "session_uuid": "test_session_001",
def __init__(self):
    self.bootstrap_servers = "localhost:9092"
    self.cv_topic = "inference_results"

    # Kafka setup
    self.consumer = Consumer({
        'bootstrap.servers': self.bootstrap_servers,
        'group.id': f'cv-debug-{int(time.time())}',
        'auto.offset.reset': 'latest'
    })

    self.consumer.subscribe([self.cv_topic])
    print(f"üîç Debugging CV data from: {self.cv_topic}")
    print("=" * 80)

def debug_angles(self, data):
    """–ê–Ω–∞–ª–∏–∑ —É–≥–ª–æ–≤ –æ—Ç CV —Å–µ—Ä–≤–∏—Å–∞"""
    metrics = data.get('metrics', {})
    angles = metrics.get('angles', [])

    print(f"\nFrame: {data.get('frame_track_uuid', 'unknown')}")
    print(f"Session: {data.get('session_uuid', 'unknown')[:8]}")
    print(f"Exercise: {data.get('exercise', 'unknown')}")

    print("\nAngles from CV:")
    for angle in angles:
        name = angle.get('name', 'unknown')
        value = angle.get('value', 0)
        print(f"  {name}: {value:.1f}¬∞")

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
    elbow_angle = None
    for angle in angles:
        if angle.get('name') == 'elbow_angle':
            elbow_angle = angle.get('value', 0)
            break

    if elbow_angle is not None:
        if elbow_angle > 110:
            predicted_state = "s1 (rest)"
        elif elbow_angle > 70:
            predicted_state = "s2 (lifting)"
        else:
            predicted_state = "s3 (lowering)"

        print(f"  ‚Üí Predicted FSM state: {predicted_state}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º
        if elbow_angle < 30:
            print(f"  ‚ö†Ô∏è VERY LOW elbow angle - possible angle calculation issue!")
        elif elbow_angle > 170:
            print(f"  ‚ö†Ô∏è VERY HIGH elbow angle - possible angle calculation issue!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ offset_angle –¥–ª—è safety
    offset_angle = None
    for angle in angles:
        if angle.get('name') == 'offset_angle':
            offset_angle = angle.get('value', 0)
            break

    if offset_angle is not None:
        if abs(offset_angle) > 15:
            print(f"  üö® SAFETY: offset_angle {offset_angle:.1f}¬∞ > 15¬∞ threshold")
        else:
            print(f"  ‚úÖ SAFETY: offset_angle {offset_angle:.1f}¬∞ is OK")

    print("-" * 60)

def run(self):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ª–∞–¥–∫–∏"""
    print("üöÄ Starting CV data debugger... (Ctrl+C to stop)")

    try:
        while True:
            msg = self.consumer.poll(timeout=1.0)

            if msg is None:
                continue

            if msg.error():
                print(f"‚ùå Error: {msg.error()}")
                continue

            try:
                data = json.loads(msg.value().decode('utf-8'))
                self.debug_angles(data)

            except Exception as e:
                print(f"‚ùå Parse error: {e}")

    except KeyboardInterrupt:
        print("\nüõë Debugger stopped")
    finally:
        self.consumer.close()
        "video_duration": 30.0,
        "current_time": 2.0,
        "landmarks": [{"x": 0.5, "y": 0.7, "z": -0.3} for _ in range(33)],
        "metrics": {
            "angles": [
                {"name": "elbow_angle", "value": 85.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.4}, "ref_point": {"x": 0.6, "y": 1.1}},  # s2 —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                {"name": "shoulder_angle", "value": 20.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}}
            ],
            "dominant_side": {"side": "left", "probability": 0.8}
        }
    },
    {
        "frame_track_uuid": "test_frame_003",
        "timestamp": datetime.now().isoformat(), 
        "exercise": "dumbbell-arm",
        "session_uuid": "test_session_001",
        "video_duration": 30.0,
        "current_time": 3.0,
        "landmarks": [{"x": 0.5, "y": 0.7, "z": -0.3} for _ in range(33)],
        "metrics": {
            "angles": [
                {"name": "elbow_angle", "value": 55.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.4}, "ref_point": {"x": 0.6, "y": 1.1}},  # s3 —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                {"name": "shoulder_angle", "value": 45.0, "point1": {"x": 0.5, "y": 0.7}, "point2": {"x": 0.6, "y": 1.1}, "ref_point": {"x": 0.6, "y": 1.1}}  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏!
            ],
            "dominant_side": {"side": "left", "probability": 0.8}
        }
    }
]

class UniversalSystemTester:
    def __init__(self):
        # Kafka –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –≤–∞—à–µ–π)
        self.producer_config = {
            'bootstrap.servers': 'localhost:9092',  # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à Kafka
            'client.id': 'test_producer'
        }
        
        self.consumer_config = {
            'bootstrap.servers': 'localhost:9092',
            'group.id': 'test_consumer_group_' + str(int(time.time())),  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞
            'auto.offset.reset': 'latest',
            'client.id': 'test_consumer'
        }
        
        self.input_topic = "performance-input"  # –û—Ç–∫—É–¥–∞ —á–∏—Ç–∞–µ—Ç Universal Processor
        self.output_topic = "performance-feedback"  # –ö—É–¥–∞ –ø–∏—à–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        try:
            self.producer = Producer(self.producer_config)
            self.consumer = Consumer(self.consumer_config)
            self.consumer.subscribe([self.output_topic])
            print("‚úÖ Kafka connection established")
        except Exception as e:
            print(f"‚ùå Kafka connection failed: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Kafka –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:9092")
            raise

    def send_test_frames(self, exercise_type="dumbbell-arm"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤ –≤ Kafka"""
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö CV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {exercise_type}...")
        
        if exercise_type == "squat":
            test_frames = SAMPLE_SQUAT_FRAMES
        else:
            test_frames = SAMPLE_DUMBBELL_FRAMES
        
        for i, frame in enumerate(test_frames):
            # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            frame["timestamp"] = datetime.now().isoformat()
            
            message = json.dumps(frame)
            
            self.producer.produce(
                topic=self.input_topic,
                key=frame["session_uuid"],
                value=message
            )
            
            main_angle = frame['metrics']['angles'][0]
            angle_name = main_angle['name']
            angle_value = main_angle['value']
            
            if exercise_type == "squat":
                if angle_value > 160:
                    state = "s1 (standing)"
                elif angle_value > 90:
                    state = "s2 (descending)"
                else:
                    state = "s3 (deep squat)"
            else:
                state = f"s{2 if angle_value > 70 else 3}"
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–¥—Ä {i+1}: {angle_name}={angle_value}, state={state}")
            
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
        
        self.producer.flush()
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–¥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

    def listen_for_results(self, timeout_seconds=30):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Universal Processor"""
        print(f"üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Universal Processor (timeout: {timeout_seconds}s)...")
        
        start_time = time.time()
        
        while time.time() - start_time < timeout_seconds:
            msg = self.consumer.poll(timeout=1.0)
            
            if msg is None:
                continue
                
            if msg.error():
                print(f"‚ùå Kafka error: {msg.error()}")
                continue
            
            try:
                result = json.loads(msg.value().decode('utf-8'))
                self.print_coaching_result(result)
                
            except Exception as e:
                print(f"‚ùå Error parsing result: {e}")
        
        print(f"‚è∞ Timeout reached ({timeout_seconds}s)")

    def print_coaching_result(self, result: Dict[str, Any]):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ coaching"""
        print("\n" + "="*60)
        print("üéØ COACHING RESULT RECEIVED")
        print("="*60)
        
        print(f"üìã Session: {result.get('session_id', 'unknown')}")
        print(f"üèãÔ∏è  Exercise: {result.get('exercise_type', 'unknown')}")
        print(f"‚è∞ Timestamp: {result.get('analysis_timestamp', 'unknown')}")
        
        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        semantic_context = result.get('semantic_context', {})
        print(f"\nüìä Analysis Window: {semantic_context.get('analysis_window_ms', 0)}ms")
        print(f"üîÑ Movement Flow: {semantic_context.get('movement_flow', [])}")
        print(f"‚ö†Ô∏è  Error Patterns: {semantic_context.get('error_patterns_detected', 0)}")
        
        # Coaching focus areas
        focus_areas = result.get('coaching_focus_areas', {})
        
        safety = focus_areas.get('safety_priorities', [])
        if safety:
            print(f"\nüö® SAFETY PRIORITIES ({len(safety)}):")
            for issue in safety:
                print(f"   ‚Ä¢ {issue.get('error_code', 'unknown')}: {issue.get('description', 'no description')}")
                print(f"     Frequency: {issue.get('frequency', 0)}, Priority: {issue.get('coaching_priority', 'unknown')}")
        
        technical = focus_areas.get('technique_improvements', [])
        if technical:
            print(f"\nüéØ TECHNIQUE IMPROVEMENTS ({len(technical)}):")
            for issue in technical:
                print(f"   ‚Ä¢ {issue.get('error_code', 'unknown')}: {issue.get('description', 'no description')}")
                print(f"     Frequency: {issue.get('frequency', 0)}, Priority: {issue.get('coaching_priority', 'unknown')}")
        
        form = focus_areas.get('form_corrections', [])
        if form:
            print(f"\nüí™ FORM CORRECTIONS ({len(form)}):")
            for issue in form:
                print(f"   ‚Ä¢ {issue.get('error_code', 'unknown')}: {issue.get('description', 'no description')}")
                print(f"     Frequency: {issue.get('frequency', 0)}, Priority: {issue.get('coaching_priority', 'unknown')}")
        
        execution = focus_areas.get('execution_guidance', [])
        if execution:
            print(f"\n‚ö° EXECUTION GUIDANCE ({len(execution)}):")
            for issue in execution:
                print(f"   ‚Ä¢ {issue.get('error_code', 'unknown')}: {issue.get('description', 'no description')}")
                print(f"     Frequency: {issue.get('frequency', 0)}, Priority: {issue.get('coaching_priority', 'unknown')}")
        
        # LLM processing hints
        hints = result.get('llm_processing_hints', {})
        print(f"\nü§ñ LLM PROCESSING HINTS:")
        print(f"   Urgency: {hints.get('urgency_level', 'unknown')}")
        print(f"   Complexity: {hints.get('coaching_complexity', 0)}")
        print(f"   Session Maturity: {hints.get('session_maturity', 0)} windows")
        print(f"   Intervention History: {hints.get('intervention_history', 0)} times")
        
        print("="*60)

    def run_full_test(self, exercise_type="dumbbell-arm"):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
        test_descriptions = {
            "dumbbell-arm": {
                "frames": "3 –∫–∞–¥—Ä–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏",
                "states": "s1 (rest) ‚Üí s2 (lifting) ‚Üí s3 (lowering) + –æ—à–∏–±–∫–∏"
            },
            "squat": {
                "frames": "4 –∫–∞–¥—Ä–∞ —Å –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è–º–∏", 
                "states": "s1 (standing) ‚Üí s2 (descending) ‚Üí s3 (deep) ‚Üí –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï SAFETY –û–®–ò–ë–ö–ò"
            }
        }
        
        desc = test_descriptions.get(exercise_type, test_descriptions["dumbbell-arm"])
        
        print(f"""
üß™ UNIVERSAL QUALITY ASSESSMENT SYSTEM TEST - {exercise_type.upper()}
============================================

–≠—Ç–æ—Ç —Ç–µ—Å—Ç:
1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç {desc['frames']}
2. –ü–µ—Ä–µ—Ö–æ–¥—ã: {desc['states']}
3. –û–∂–∏–¥–∞–µ—Ç coaching results –æ—Ç Universal Processor

–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:
- Kafka –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:9092
- tisit-performance-svc –∑–∞–ø—É—â–µ–Ω (python -m app.main)
- –¢–æ–ø–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã (performance-input, performance-feedback)
""")
        
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.send_test_frames(exercise_type)
        
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Universal Processor —Å–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–∞ –ø–æ 3 —Å–µ–∫—É–Ω–¥—ã)...")
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        
        # –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.listen_for_results(timeout_seconds=30)
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    import sys
    
    # –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    exercise_type = "dumbbell-arm"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if len(sys.argv) > 1:
        exercise_type = sys.argv[1]
    
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {exercise_type}")
    
    tester = UniversalSystemTester()
    tester.run_full_test(exercise_type)